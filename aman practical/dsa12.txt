#include<iostream>
#include<fstream>
#include<stdio.h>
using namespace std;

// Employee class Declaration
class Employee{
private:
    int code;
    char name[20];
    float salary;
    char designation[20];
public:
    void read();
    void display();
    // will return employee code
    int getEmpCode() { return code;}
    // will return employee salary
    float getSalary() { return salary;}
    // will update employee salary
    void updateSalary(float s) { salary=s;}
};

// Read employee record
void Employee::read(){
    cout << "Enter employee code: ";
    cin >> code;
    cout << "Enter name: ";
    cin.ignore(1);
    cin.getline(name,20);
    cout << "Enter Designation: ";
    cin >> designation;
    cout << "Enter salary: ";
    cin >> salary;
}

// Display employee record
void Employee::display(){
    cout << code << " " << name << "\t" << salary << endl;
}

// Global declaration
fstream file;

// Will delete file when program is being executed
// because we are create file in append mode
void deleteExistingFile(){
    remove("EMPLOYEE.DAT");
}

// Function to append record into file
void appendToFille(){
    Employee x;
    // Read employee record from user
    x.read();
    file.open("EMPLOYEE.DAT", ios::binary | ios::app);
    if(!file){
        cout << "ERROR IN CREATING FILE" << endl;
        return;
    }
    // Write into file
    file.write((char*)&x, sizeof(x));
    file.close();
    cout << "Record added sucessfully." << endl;
}

void displayAll(){
    Employee x;
    file.open("EMPLOYEE.DAT", ios::binary | ios::in);
    if(!file){
        cout << "ERROR IN OPENING FILE" << endl;
        return;
    }
    while(file){
        if(file.read((char*)&x, sizeof(x)))
            x.display();
    }
    file.close();
}

void searchForRecord(){
    // Read employee id
    Employee x;
    int c;
    int isFound = 0;
    cout << "Enter employee code: ";
    cin >> c;
    file.open("EMPLOYEE.DAT", ios::binary | ios::in);
    if(!file){
        cout << "ERROR IN OPENING FILE" << endl;
        return;
    }
    while(file){
        if(file.read((char*)&x, sizeof(x))){
            if(x.getEmpCode() == c){
                cout << "RECORD FOUND" << endl;
                x.display();
                isFound = 1;
                break;
            }
        }
    }
    if(isFound == 0){
        cout << "Record not found!!!" << endl;
    }
    file.close();
}

// Function to increase salary
void increaseSalary(){
    // Read employee id
    Employee x;
    int c;
    int isFound = 0;
    float sal;
    cout << "Enter employee code: ";
    cin >> c;
    file.open("EMPLOYEE.DAT", ios::binary | ios::in | ios::out);
    if(!file){
        cout << "ERROR IN OPENING FILE" << endl;
        return;
    }
    while(file){
        long pos = file.tellg();
        if(file.read((char*)&x, sizeof(x))){
            if(x.getEmpCode() == c){
                cout << "Enter salary hike: ";
                cin >> sal;
                x.updateSalary(x.getSalary() + sal);
                file.seekp(pos, ios::beg);
                file.write((char*)&x, sizeof(x));
                isFound = 1;
                break;
            }
        }
    }
    if(isFound == 0){
        cout << "Record not found!!!" << endl;
    }
    file.close();
    cout << "Salary updated successfully." << endl;
}

// Insert record by assuming that records are in ascending order
void insertRecord(){
    // Read employee record
    Employee x, newEmp;
    // Read record to insert
    newEmp.read();
    fstream fin;
    // Read file in input mode
    file.open("EMPLOYEE.DAT", ios::binary | ios::in);
    // Open file in write mode
    fin.open("TEMP.DAT", ios::binary | ios::out);
    if(!file){
        cout << "Error in opening EMPLOYEE.DAT file!!!" << endl;
        return;
    }
    if(!fin){
        cout << "Error in opening TEMP.DAT file!!!" << endl;
        return;
    }
    bool inserted = false;
    while(file.read((char*)&x, sizeof(x))){
        if(x.getEmpCode() > newEmp.getEmpCode() && !inserted){
            fin.write((char*)&newEmp, sizeof(newEmp));
            inserted = true;
        }
        fin.write((char*)&x, sizeof(x));
    }
    if(!inserted){
        fin.write((char*)&newEmp, sizeof(newEmp));
    }
    fin.close();
    file.close();
    remove("EMPLOYEE.DAT");
    rename("TEMP.DAT", "EMPLOYEE.DAT");
    cout << "Record inserted successfully." << endl;
}

int main()
{
    char ch;
    // If required then only remove the file
    deleteExistingFile();
    do{
        int n;
        cout << "ENTER CHOICE" << endl;
        cout << "1.ADD AN EMPLOYEE" << endl;
        cout << "2.DISPLAY" << endl;
        cout << "3.SEARCH" << endl;
        cout << "4.INCREASE SALARY" << endl;
        cout << "5.INSERT RECORD" << endl;
        cout << "Make a choice: ";
        cin >> n;
        switch(n){
            case 1:
                appendToFille();
                break;
            case 2:
                displayAll();
                break;
            case 3:
                searchForRecord();
                break;
            case 4:
                increaseSalary();
                break;
            case 5:
                insertRecord();
                break;
            default:
                cout << "Invalid Choice" << endl;
        }
        cout << "Do you want to continue? (Y/N): ";
        cin >> ch;
    } while(ch == 'Y' || ch == 'y');
    return 0;
}
